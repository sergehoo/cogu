# Generated by Django 4.2.20 on 2025-04-23 10:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djgeojson.fields
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmployeeUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('civilite', models.CharField(blank=True, choices=[('Monsieur', 'Monsieur'), ('Madame', 'Madame'), ('Docteur', 'Docteur'), ('Professeur', 'Professeur'), ('Excellence', 'Excellence'), ('Honorable', 'Honorable')], max_length=10, null=True)),
                ('contact', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('fonction', models.CharField(blank=True, max_length=255, null=True)),
                ('photo', models.ImageField(blank=True, default='users/images/user.webp', null=True, upload_to='users/images/')),
                ('roleemployee', models.CharField(choices=[('National', 'National'), ('Regional', 'Régional'), ('DistrictSanitaire', 'District Sanitaire'), ('Centre', 'Centre de Sante'), ('Public', 'Utilisateur Publique')], default='Public', max_length=20)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_index=True, max_length=500, null=True, unique=True)),
                ('type', models.CharField(blank=True, choices=[('Commune', 'Commune'), ('Village', 'Village'), ('Ville', 'Ville'), ('Quartier', 'Quartier')], max_length=100, null=True)),
                ('population', models.CharField(blank=True, max_length=100, null=True)),
                ('is_in', models.CharField(blank=True, max_length=255, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='ComposantKit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('code_produit', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('unite_mesure', models.CharField(choices=[('unite', 'Unité'), ('boite', 'Boîte'), ('carton', 'Carton'), ('kg', 'Kilogramme'), ('litre', 'Litre')], max_length=20)),
                ('duree_conservation', models.PositiveIntegerField(help_text='Durée en mois avant péremption', validators=[django.core.validators.MinValueValidator(1)])),
                ('temperature_stockage', models.CharField(default='Ambiance', help_text='Conditions de stockage recommandées', max_length=50)),
                ('seuil_alerte', models.PositiveIntegerField(default=10, help_text='Seuil minimum pour déclencher une alerte')),
            ],
            options={
                'verbose_name': 'Composant de kit',
                'verbose_name_plural': 'Composants de kits',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('subject', models.CharField(max_length=200, verbose_name='Sujet')),
                ('message', models.TextField(verbose_name='Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'envoi")),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
            ],
            options={
                'verbose_name': 'Message de contact',
                'verbose_name_plural': 'Messages de contact',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DistrictSanitaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, db_index=True, max_length=100, null=True, unique=True)),
                ('geom', djgeojson.fields.PointField(blank=True, null=True)),
                ('geojson', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fournisseur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('code_fournisseur', models.CharField(max_length=50, unique=True)),
                ('contact', models.CharField(max_length=100)),
                ('telephone', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('actif', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Fournisseur',
                'verbose_name_plural': 'Fournisseurs',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='IncidentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('parent_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.incidenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Kit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('instructions', models.TextField(blank=True, help_text="Instructions d'utilisation")),
                ('capacite_personnes', models.PositiveIntegerField(default=1, help_text='Nombre de personnes que le kit peut couvrir')),
                ('actif', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Kit d'urgence",
                'verbose_name_plural': "Kits d'urgence",
                'ordering': ['categorie', 'reference'],
            },
        ),
        migrations.CreateModel(
            name='KitCategorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('niveau_urgence', models.CharField(choices=[('routine', 'Routine'), ('urgence', 'Urgence'), ('critique', 'Critique')], default='urgence', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Catégorie de kit',
                'verbose_name_plural': 'Catégories de kits',
                'ordering': ['niveau_urgence', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='MajorEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', django.contrib.gis.db.models.fields.PolygonField(blank=True, geography=True, help_text='Zone couverte par l’événement', null=True, srid=4326)),
                ('organizer', models.CharField(blank=True, max_length=255)),
                ('recurring', models.BooleanField(default=False)),
                ('parent_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.majorevent')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_patient', models.CharField(blank=True, db_index=True, editable=False, max_length=225, unique=True)),
                ('mpi_upi', models.UUIDField(blank=True, db_index=True, null=True, unique=True)),
                ('nom', models.CharField(db_index=True, max_length=225)),
                ('prenoms', models.CharField(db_index=True, max_length=225)),
                ('contact', models.CharField(db_index=True, max_length=20)),
                ('date_naissance', models.DateField(db_index=True)),
                ('sexe', models.CharField(choices=[('Masculin', 'Masculin'), ('Feminin', 'Féminin')], max_length=10)),
                ('num_cmu', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_num', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_nni', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('secteur_activite', models.CharField(blank=True, max_length=200, null=True)),
                ('niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=500, null=True)),
                ('quartier', models.CharField(blank=True, max_length=255, null=True)),
                ('village', models.CharField(blank=True, max_length=255, null=True)),
                ('autretypeanimal', models.CharField(blank=True, max_length=255, null=True)),
                ('patient_mineur', models.BooleanField(default=False)),
                ('accompagnateur', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateur_contact', models.CharField(blank=True, max_length=20, null=True)),
                ('accompagnateur_adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateur_nature', models.CharField(blank=True, choices=[('Pere', 'Pere'), ('Mere', 'Mere'), ('Oncle', 'Oncle'), ('Tante', 'Tante'), ('Frère', 'Frère'), ('Soeure', 'Soeure'), ('Cousin', 'Cousin'), ('Cousine', 'Cousine'), ('Connaissance du quartier', 'Connaissance du quartier'), ('Voisin du quartier', 'Voisin du quartier'), ('Propriétaire animal ', 'Propriétaire animal ')], max_length=255, null=True)),
                ('accompagnateur_niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('Admis', 'Admis'), ('Sorti', 'Sorti'), ('Transféré', 'Transféré'), ('Décédé', 'Décédé'), ('Sous observation', 'Sous observation'), ('Sous traitement', 'Sous traitement'), ('Chirurgie programmée', 'Chirurgie programmée'), ('En chirurgie', 'En chirurgie'), ('Récupération post-opératoire', 'Récupération post-opératoire'), ('USI', 'Unité de soins intensifs (USI)'), ('Urgence', 'Urgence'), ('Consultation externe', 'Consultation externe'), ('Réhabilitation', 'Réhabilitation'), ('En attente de diagnostic', 'En attente de diagnostic'), ('Traitement en cours', 'Traitement en cours'), ('Suivi programmé', 'Suivi programmé'), ('Consultation', 'Consultation'), ('Sortie en attente', 'Sortie en attente'), ('Isolement', 'Isolement'), ('Ambulantoire', 'Ambulantoire'), ('Aucun', 'Aucun')], default='Aucun', max_length=100, null=True)),
                ('gueris', models.BooleanField(default=False)),
                ('decede', models.BooleanField(default=False)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('commune', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.commune')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': (('voir_patient', 'Peut voir patient'),),
            },
        ),
        migrations.CreateModel(
            name='PolesRegionaux',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReportRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SanitaryIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'À valider'), ('validated', 'Validé'), ('rejected', 'Rejeté')], db_index=True, default='pending', max_length=20)),
                ('description', models.TextField()),
                ('date_time', models.DateTimeField()),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, geography=True, null=True, srid=4326)),
                ('number_of_people_involved', models.PositiveIntegerField()),
                ('outcome', models.CharField(choices=[('mort', 'Décès'), ('blessure', 'Blessure'), ('sauvé', 'Sauvé'), ('exeat', 'Exeat'), ('evacue', 'Évacué'), ('pris_charge', 'Pris en charge'), ('autre', 'Autre')], db_index=True, max_length=100)),
                ('deces_nbr', models.PositiveIntegerField()),
                ('blessure_nbr', models.PositiveIntegerField()),
                ('evacues_nbr', models.PositiveIntegerField(default=0)),
                ('pris_en_charge_nbr', models.PositiveIntegerField(default=0)),
                ('exeat_nbr', models.PositiveIntegerField(default=0)),
                ('source', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceSanitaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=100, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('upstream', models.CharField(blank=True, max_length=255, null=True)),
                ('date_modified', models.DateTimeField(blank=True, null=True)),
                ('source_url', models.URLField(blank=True, max_length=500, null=True)),
                ('completeness', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('what3words', models.CharField(blank=True, max_length=255, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('commune', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cogu.commune')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cogu.districtsanitaire')),
            ],
        ),
        migrations.CreateModel(
            name='TypeServiceSanitaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=500, null=True)),
                ('acronyme', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WhatsAppMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction', models.CharField(choices=[('in', 'Reçu'), ('out', 'Envoyé')], db_index=True, max_length=3)),
                ('sender', models.CharField(max_length=50)),
                ('recipient', models.CharField(max_length=50)),
                ('body', models.TextField(db_index=True)),
                ('read', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='VictimCare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prise_en_charge_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('type_prise_en_charge', models.CharField(choices=[('soins', 'Soins médicaux'), ('hospitalisation', 'Hospitalisation'), ('vaccination', 'Vaccination'), ('psy', 'Soutien psychologique'), ('financier', 'Soutien Financier'), ('autre', 'Autre')], max_length=255)),
                ('description', models.TextField(blank=True)),
                ('lieu_prise_en_charge', models.CharField(blank=True, max_length=255)),
                ('intervenant', models.CharField(blank=True, max_length=255)),
                ('est_prise_en_charge_effective', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='victim_cares', to='cogu.sanitaryincident')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cares', to='cogu.patient')),
                ('servicedesante', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.servicesanitaire')),
            ],
        ),
        migrations.CreateModel(
            name='Testimony',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StockCentre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('adresse', models.TextField()),
                ('capacite_max', models.PositiveIntegerField(help_text='Capacité totale en unités de stockage')),
                ('temperature_controlee', models.BooleanField(default=False)),
                ('actif', models.BooleanField(default=True)),
                ('date_creation', models.DateField(auto_now_add=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cogu.servicesanitaire')),
                ('responsable', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='centres_responsables', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Centre de stockage',
                'verbose_name_plural': 'Centres de stockage',
                'ordering': ['region', 'nom'],
            },
        ),
        migrations.AddField(
            model_name='servicesanitaire',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.typeservicesanitaire'),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='centre_sante',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.servicesanitaire'),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.commune'),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='event',
            field=models.ForeignKey(blank=True, help_text='Si l’incident est lié à un événement majeur', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.majorevent'),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='incident_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cogu.incidenttype'),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='message',
            field=models.ForeignKey(blank=True, help_text='Message WhatsApp à l’origine de l’incident, s’il y en a un', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incidents', to='cogu.whatsappmessage'),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='patients_related',
            field=models.ManyToManyField(db_index=True, to='cogu.patient'),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='posted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='postedby', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sanitaryincident',
            name='validated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Respondent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=15, verbose_name='Numéro de téléphone')),
                ('role', models.CharField(max_length=255, verbose_name='Rôle')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Intervenant',
                'verbose_name_plural': 'Intervenants',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nom de la ressource')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Quantité')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cogu.commune', verbose_name='Lieu')),
            ],
            options={
                'verbose_name': 'Ressource',
                'verbose_name_plural': 'Ressources',
            },
        ),
        migrations.CreateModel(
            name='MouvementStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantite', models.PositiveIntegerField()),
                ('type_mouvement', models.CharField(choices=[('entree', 'Entrée'), ('sortie', 'Sortie'), ('transfert', 'Transfert'), ('ajustement', 'Ajustement'), ('perte', 'Perte')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('centre_destination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrees', to='cogu.stockcentre')),
                ('centre_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sorties', to='cogu.stockcentre')),
                ('composant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mouvements', to='cogu.composantkit')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('incident', models.ForeignKey(blank=True, help_text='Si lié à un incident sanitaire', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.sanitaryincident')),
                ('kit', models.ForeignKey(blank=True, help_text='Si lié à un kit spécifique', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.kit')),
            ],
            options={
                'verbose_name': 'Mouvement de stock',
                'verbose_name_plural': 'Mouvements de stock',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KitComposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantite_standard', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('composant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cogu.composantkit')),
                ('kit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compositions', to='cogu.kit')),
            ],
            options={
                'verbose_name': 'Composition de kit',
                'verbose_name_plural': 'Compositions de kits',
                'unique_together': {('kit', 'composant')},
            },
        ),
        migrations.AddField(
            model_name='kit',
            name='categorie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cogu.kitcategorie'),
        ),
        migrations.AddField(
            model_name='kit',
            name='composants',
            field=models.ManyToManyField(related_name='kits', through='cogu.KitComposition', to='cogu.composantkit'),
        ),
        migrations.AddField(
            model_name='kit',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kits_crees', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='IncidentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateTimeField(auto_now_add=True, verbose_name='Date du rapport')),
                ('details', models.TextField(verbose_name='Détails')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cogu.sanitaryincident', verbose_name='Incident sanitaire')),
                ('respondent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.respondent', verbose_name='Intervenant')),
            ],
            options={
                'verbose_name': "Rapport d'incident",
                'verbose_name_plural': "Rapports d'incidents",
            },
        ),
        migrations.CreateModel(
            name='IncidentMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_url', models.URLField(db_index=True)),
                ('media_type', models.CharField(db_index=True, max_length=50)),
                ('downloaded_file', models.FileField(blank=True, db_index=True, null=True, upload_to='incident_media/')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='cogu.sanitaryincident')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalPatient',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code_patient', models.CharField(blank=True, db_index=True, editable=False, max_length=225)),
                ('mpi_upi', models.UUIDField(blank=True, db_index=True, null=True)),
                ('nom', models.CharField(db_index=True, max_length=225)),
                ('prenoms', models.CharField(db_index=True, max_length=225)),
                ('contact', models.CharField(db_index=True, max_length=20)),
                ('date_naissance', models.DateField(db_index=True)),
                ('sexe', models.CharField(choices=[('Masculin', 'Masculin'), ('Feminin', 'Féminin')], max_length=10)),
                ('num_cmu', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_num', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_nni', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('secteur_activite', models.CharField(blank=True, max_length=200, null=True)),
                ('niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=500, null=True)),
                ('quartier', models.CharField(blank=True, max_length=255, null=True)),
                ('village', models.CharField(blank=True, max_length=255, null=True)),
                ('autretypeanimal', models.CharField(blank=True, max_length=255, null=True)),
                ('patient_mineur', models.BooleanField(default=False)),
                ('accompagnateur', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateur_contact', models.CharField(blank=True, max_length=20, null=True)),
                ('accompagnateur_adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateur_nature', models.CharField(blank=True, choices=[('Pere', 'Pere'), ('Mere', 'Mere'), ('Oncle', 'Oncle'), ('Tante', 'Tante'), ('Frère', 'Frère'), ('Soeure', 'Soeure'), ('Cousin', 'Cousin'), ('Cousine', 'Cousine'), ('Connaissance du quartier', 'Connaissance du quartier'), ('Voisin du quartier', 'Voisin du quartier'), ('Propriétaire animal ', 'Propriétaire animal ')], max_length=255, null=True)),
                ('accompagnateur_niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('Admis', 'Admis'), ('Sorti', 'Sorti'), ('Transféré', 'Transféré'), ('Décédé', 'Décédé'), ('Sous observation', 'Sous observation'), ('Sous traitement', 'Sous traitement'), ('Chirurgie programmée', 'Chirurgie programmée'), ('En chirurgie', 'En chirurgie'), ('Récupération post-opératoire', 'Récupération post-opératoire'), ('USI', 'Unité de soins intensifs (USI)'), ('Urgence', 'Urgence'), ('Consultation externe', 'Consultation externe'), ('Réhabilitation', 'Réhabilitation'), ('En attente de diagnostic', 'En attente de diagnostic'), ('Traitement en cours', 'Traitement en cours'), ('Suivi programmé', 'Suivi programmé'), ('Consultation', 'Consultation'), ('Sortie en attente', 'Sortie en attente'), ('Isolement', 'Isolement'), ('Ambulantoire', 'Ambulantoire'), ('Aucun', 'Aucun')], default='Aucun', max_length=100, null=True)),
                ('gueris', models.BooleanField(default=False)),
                ('decede', models.BooleanField(default=False)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('commune', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cogu.commune')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical patient',
                'verbose_name_plural': 'historical patients',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HealthRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('poles', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='regions', to='cogu.polesregionaux')),
            ],
        ),
        migrations.AddField(
            model_name='districtsanitaire',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='cogu.healthregion'),
        ),
        migrations.CreateModel(
            name='DeploiementKit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantite', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('date_envoi', models.DateTimeField()),
                ('date_reception', models.DateTimeField(blank=True, null=True)),
                ('statut', models.CharField(choices=[('preparation', 'En préparation'), ('envoye', 'Envoyé'), ('recu', 'Reçu'), ('utilise', 'Utilisé'), ('retourne', 'Retourné'), ('perdu', 'Perdu')], default='preparation', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('centre_source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='envois', to='cogu.stockcentre')),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cogu.districtsanitaire')),
                ('incident', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kits_deployes', to='cogu.sanitaryincident')),
                ('kit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deploiements', to='cogu.kit')),
                ('responsable', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deploiements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Déploiement de kit',
                'verbose_name_plural': 'Déploiements de kits',
                'ordering': ['-date_envoi'],
            },
        ),
        migrations.AddField(
            model_name='composantkit',
            name='kit_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cogu.kitcategorie'),
        ),
        migrations.AddField(
            model_name='commune',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cogu.districtsanitaire'),
        ),
        migrations.CreateModel(
            name='CareFollowUp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('statut', models.CharField(choices=[('en cours', 'En cours'), ('terminé', 'Terminé'), ('référé', 'Référé'), ('non suivi', 'Non suivi')], max_length=100)),
                ('note', models.TextField(blank=True)),
                ('professionnel', models.CharField(blank=True, max_length=255)),
                ('care', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followups', to='cogu.victimcare')),
            ],
        ),
        migrations.AddField(
            model_name='employeeuser',
            name='centre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cogu.servicesanitaire'),
        ),
        migrations.AddField(
            model_name='employeeuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='employeeuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantite', models.PositiveIntegerField(default=0)),
                ('lot', models.CharField(blank=True, max_length=50)),
                ('date_expiration', models.DateField()),
                ('date_reception', models.DateField(default=django.utils.timezone.now)),
                ('fournisseur', models.CharField(blank=True, max_length=100)),
                ('centre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='cogu.stockcentre')),
                ('composant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='cogu.composantkit')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Stock',
                'verbose_name_plural': 'Stocks',
                'ordering': ['composant', 'date_expiration'],
                'unique_together': {('centre', 'composant', 'lot')},
            },
        ),
    ]
